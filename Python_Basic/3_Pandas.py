
# coding: utf-8

# ---
# # 課題3 - Pandas

# In[ ]:


# ライブラリのインストール
import pandas as pd
import numpy as np


# ---
# 課題0： 0から9までの一次元の配列を値に、a-jをインデックスとしてSeriesを作成せよ（変数名はsr）

# In[ ]:


# 以下よりコードを記入してください  ##############################


# 出力  #################################################
display(sr)


# ---
# 課題1： sample_dictをDataFrameに変換せよ
# 
# その際に"a, b, c, d, e"をインデックスとして追加すること（変数名はdf_1）

# In[ ]:


sample_dict = {'ID':['100','101','102','103','104'],
               'City':['Tokyo','Osaka','Kyoto','Hokkaido','Tokyo'],
               'Birth_year':[1990,1989,1992,1997,1982],
               'Name':['Hiroshi','Akiko','Yuki','Satoru','Steve']}
# 以下よりコードを記入してください  ##############################


# 出力  #################################################
display(df_1)


# ---
# 課題2： df_1を転置して出力せよ（変数名はdf_2）

# In[ ]:


# 以下よりコードを記入してください  ##############################


# 出力  #################################################
display(df_2)


# ---
# 課題3： df_1からBirth_yearとIDのカラムの値を取り出しDataFrameとして出力せよ（変数名はdf_3）
# 
# またBirth_yearのカラムのみを取り出した場合の変数のタイプを出力せよ（変数名は by_type)

# In[ ]:


# 以下よりコードを記入してください  ##############################


# 出力  #################################################
display(df_3)
print(by_type)


# ---
# 課題4： df_1から'City'が'Tokyo'のデータを取り出して出力せよ（変数名はdf_4_1）
# 
# また'City'が'Tokyo'もしくは'Osaka'のデータを取り出して出力せよ（変数名はdf_4_2）

# In[ ]:


# 以下よりコードを記入してください  ##############################


# 出力  #################################################
display(df_4_1)
display(df_4_2)


# ---
# 課題5： sample_dict_2とsample_dict_3をDataFrameに変換し、
# - idをキーに内部結合（変数名はdf_5_1）
# - 全結合（変数名はdf_5_2)
# - 左外部結合（変数名はdf_5_3)
# 
# 上記3つの結合結果を表示せよ

# In[ ]:


sample_dict_2 = {
    'id': ['100', '101', '102', '103', '104', '106', '108', '110', '111', ' 113'],
    'city': ['Tokyo', 'Osaka', 'Kyoto', 'Hokkaido', 'Tokyo', 'Tokyo', 'Osaka', 'Kyoto', 'Hokkaido', 'Tokyo'],
    'birth_year': [1990, 1989, 1992, 1997, 1982, 1991, 1988, 1990, 1995, 1981],
    'name': ['Hiroshi', 'Akiko', 'Yuki', 'Satoru', 'Steeve', 'Mituru', 'Aoi', 'Tarou', 'Suguru', 'Mitsuo']
}
sample_dict_3 =  {
    'id': ['100', '101', '102', '105', '107'],
    'math': [50, 43, 33, 76, 98],
    'english': [90, 30, 20, 50, 30],
    'sex': ['M', 'F', 'F', 'M', 'M'], 
    'index_num': [0, 1, 2, 3, 4]
}
# 以下よりコードを記入してください  ##############################


# 出力  #################################################
display(df_5_1)
display(df_5_2)
display(df_5_3)


# ---
# 課題6： sample_df_1のデータに対してCityごとにデータ数をカウントせよ（変数名はdf_6_1）
# 
# また、cityごとのbirth_yearの平均値を求めよ（変数名はdf_6_2）
# 
# ※出力はDataFrame指定

# In[ ]:


# 以下よりコードを記入してください  ##############################


# 出力  #################################################
display(df_6_1)
display(df_6_2)


# ---
# 課題7： 
# - nan_dfの欠損値のある行をすべて取り除き出力せよ（変数名はdf_7_1）
# - nan_dfの欠損値を各カラムの平均値で埋めて出力せよ（変数名はdf_7_2）

# In[ ]:


nan_df = pd.DataFrame(np.random.rand(10,4))
nan_df.iloc[1, 0] = np.nan
nan_df.iloc[2:4, 3] = np.nan
nan_df.iloc[5:, 2] = np.nan
# 以下よりコードを記入してください  ##############################


# 出力  #################################################
display(df_7_1)
display(df_7_2)


# ---
# 課題8： 
# - sample_df_2に接頭辞「1_」を付けて出力せよ（変数名はdf_8_1）
# - sample_df_2に接尾辞「_z」を付けて出力せよ（変数名はdf_8_2）

# In[ ]:


# 以下よりコードを記入してください  ##############################


# 出力  #################################################
display(df_8_1)
display(df_8_2)


# ---
# 課題9： sample_df_2のidをfloatに変換し、birth_yearはintに変換しsample_df_2から数値タイプのカラムのみを取り出せ（変数名はdf_9）
# 
# ※カラム名を直接指定するのはNG

# In[ ]:


# 以下よりコードを記入してください  ##############################


# 出力  #################################################
display(df_9)


# ---
# 課題10： numeric_dfを行方向に7対3に分割し、DataFrameの行数、列数がわかるように出力せよ（変数名はdf_10_1, df_10_2）
# 
# ※ただしdf_10_1の方がdf_10_2よりも行数が多くなるように設定せよ

# In[ ]:


numeric_df = pd.DataFrame(np.random.randint(1,100, (20,7)))
# 以下よりコードを記入してください  ##############################


# 出力  #################################################
print(df_10_1.shape)
print(df_10_2.shape)


# ---
# 課題11： age_dfの'age'カラムの値に対して'age_group'カラムを追加して、
# 
# - 0 ~ 18までを'kids'
# - 19 ~ 65までを'adult'
# - 65 ~ 99までを'elderly'
# 
# と分類し表示せよ（変数名はage_df）

# In[ ]:


age_df = numeric_df.rename(columns={0: 'age'}, inplace=False)
# 以下よりコードを記入してください  ##############################


# 出力  #################################################
display(age_df)


# ---
# 課題12： name_dictをDataFrameに変換し以下の二つの条件を満たすDataFrameを出力せよ（変数名はname_df）
# - 'name'の値はfirst,middle,lastに分割し、それぞれを個別のカラムに格納してname_dfに追加
# - 'location'の","より前の値をcityカラムに格納してname_dfに追加

# In[ ]:


name_dict = {"name":["John Artur Doe", "Jane Ann Smith", "Nico P"], 
     "location":["Los Angeles, CA", "Washington, DC", "Barcelona, Spain"]}
# 以下よりコードを記入してください  ##############################


# 出力  #################################################
display(name_df)


# ---
# 課題13： data/CarPrice_Assignment.csvを読み込み 'CarName'のトップ3をlistで出力し、その値を持つデータを取り出して出力せよ
# 
# （変数名はそれぞれlist_13, df_13）

# In[ ]:


# データの読み込み
car_price_assign_df = pd.read_csv('../data/CarPrice_Assignment.csv')


# In[ ]:


# 以下よりコードを記入してください  ##############################


# 出力  #################################################
display(list_13)
display(df_13)


# ---
# 課題14： car_price_assign_dfの'carbody'に対して頻出度10以下を'others'に置き換えて出力せよ。以下の変数で対応する値を出力せよ。
# - frequencies: car_price_assign_dfの'carbody'の値と出現回数
# - small_categories: 閾値10回に満たない'carbody'の値と出現回数
# - others_freq: othersに置き換えた後の'carbody'の値と出現回数

# In[ ]:


# 以下よりコードを記入してください  ##############################


# 出力  #################################################
print(frequencies)
print('#' * 20)
print(small_categories)
print('#' * 20)
print(others_freq)


# ---
# 課題15： 自分で好きなデータセットを作成 or 取得してきてデータ分析してみよう。
# - 使用したデータ
# - データからどんなことが言えそうか？（考察）
# - 考察に対してどうやってアプローチしたか？（仮説などもあると良い）
# 
# 参考サイト[Kaggle Dataset](https://www.kaggle.com/datasets)などから取ってくると良いと思います。
# 
# データセットの探し方がわからない場合は適宜メンターに聞いてみてください。
# 
# 例えば、[タイタニック号沈没事故に関するデータ](https://www.kaggle.com/c/titanic/overview)の場合
# - 乗客の生存率に大きく影響のありそうなデータは何か？
# - どういう前処理をすると良さそうか？
# 
# などなど
